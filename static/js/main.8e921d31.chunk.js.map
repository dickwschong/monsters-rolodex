{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","id","className","alt","src","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","fetch","then","response","json","users","setState","componentDidUpdate","handleSearch","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAKaA,G,kBAAO,SAACC,GAMsBA,EAAMC,QAAQC,GAErD,OAEI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAK,wBAA0BL,EAAMC,QAAQC,GAAK,2BACrE,4BAAKF,EAAMC,QAAQK,MACnB,2BAAIN,EAAMC,QAAQM,UCbjBC,EAAW,SAACR,GAIrB,OACI,yBAAKG,UAAU,aAEVH,EAAMS,SAASC,KAAK,SAAAT,GAAO,OACxB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,SCRnCW,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOX,UAAU,SACbY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwEHG,E,kDAzEf,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAWRkB,kBAAoB,WAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,QAfzB,EAoBnBE,mBAAqB,aApBF,EAkCnBC,aAAe,SAACC,GAGd,EAAKH,SAAS,CACZI,YAAaD,EAAEE,OAAOC,SAnCxB,EAAKC,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IALE,E,qDAkDV,MAE2BI,KAAKD,MAA/BtB,EAFD,EAECA,SAAUmB,EAFX,EAEWA,YACZK,EAAmBxB,EAASyB,QAAQ,SAACjC,GACvC,OAAOA,EAAQK,KAAK6B,cAAcC,SAASR,EAAYO,kBAI3D,OACE,yBAAKhC,UAAU,OACb,+CAEA,kBAAC,EAAD,CACEU,YAAY,aACZC,aAAckB,KAAKN,eAGrB,kBAAC,EAAD,CAAUjB,SAAUwB,S,GApERI,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e921d31.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"./card.style.css\";\n\n\nexport const Card = (props) => {\n// console.log(\"card.component.jsx: =======\");\n//  console.log(props.monster.id);\n//  console.log(props.key); // key is for React! it is hidden from the props!\n\n    // Format the image url - I don't need the $ sign!\n    let imgURL = 'https://robohash.org/' + props.monster.id + '?set=set2&size=180x180';\n\n    return (\n\n        <div className='card-container' >\n            <img alt=\"monster\" src={'https://robohash.org/' + props.monster.id + '?set=set2&size=180x180'} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n\n    )\n\n}\n\n// robohash.org/1?set=set2\n//<img alt=\"monster\" src={imgURL} /> working\n//<img alt=\"monster\" src={'https://robohash.org/' + props.monster.id + '?set=set2&size=180x180'} /> working without $","import React from 'react';\nimport './card-list.style.css'; // provide the grid format\n\nimport { Card } from '../card/card.component'\n\nexport const CardList = (props) => {\n// console.log(\"card-list.component.jsx: =======\");\n// console.log(props.monsters);\n\n    return (\n        <div className='card-list'>    \n\n            {props.monsters.map( monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        \n        </div>\n    );\n\n    // the key is for React, which is hidden!\n\n} //CardList","import React from 'react';\n\nimport './search-box.style.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search' \n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange} \n    />\n);\n\n/*\n\n*/\n","import React from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n\n  this.state = {\n    monsters: [],\n    searchField: ''\n  }\n} //constructor\n\n\n/* Life Cycle Methods */\n// load the monster list\ncomponentDidMount = () => {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n\n} //componentDidMount\n\n// Filter the monster list\ncomponentDidUpdate = () => {\n//console.log(\"componentDidUpdate: \" + this.state.searchField );\n\n// This call infinite loops!\n// let temp = this.state.monsters.filter((monster) => {\n//     console.log(monster.name);\n//   } );\n// this.setState({monsters: temp})\n\n} //componentDidUpdate\n\n\n\n/* Event Handler */\nhandleSearch = (e) => {\n//console.log(e.target.value);\n\n  this.setState({\n    searchField: e.target.value\n  });\n\n} //handleSearch\n\n\n\n/* Self-Defined Functions */\n\n\n\n\nrender() {\n  // object destructuring ES6\n  const { monsters, searchField } = this.state;\n  const filteredMonsters = monsters.filter( (monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n      // can also try indexOf\n  })\n\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n\n      <SearchBox \n        placeholder=\"enter here\"\n        handleChange={this.handleSearch}\n      />\n\n      <CardList monsters={filteredMonsters} />\n    </div>\n  )};\n\n} //class App\n\nexport default App;\n\n/*\n<CardList monsters={this.state.monsters} />\n\n<input type='search' placeholder=\"enter here\" onChange={this.handleSearch} />\n\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}